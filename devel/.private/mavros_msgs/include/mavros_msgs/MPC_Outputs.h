// Generated by gencpp from file mavros_msgs/MPC_Outputs.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_MPC_OUTPUTS_H
#define MAVROS_MSGS_MESSAGE_MPC_OUTPUTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct MPC_Outputs_
{
  typedef MPC_Outputs_<ContainerAllocator> Type;

  MPC_Outputs_()
    : mpc_mv_out()  {
      mpc_mv_out.assign(0.0);
  }
  MPC_Outputs_(const ContainerAllocator& _alloc)
    : mpc_mv_out()  {
  (void)_alloc;
      mpc_mv_out.assign(0.0);
  }



   typedef boost::array<float, 2>  _mpc_mv_out_type;
  _mpc_mv_out_type mpc_mv_out;





  typedef boost::shared_ptr< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> const> ConstPtr;

}; // struct MPC_Outputs_

typedef ::mavros_msgs::MPC_Outputs_<std::allocator<void> > MPC_Outputs;

typedef boost::shared_ptr< ::mavros_msgs::MPC_Outputs > MPC_OutputsPtr;
typedef boost::shared_ptr< ::mavros_msgs::MPC_Outputs const> MPC_OutputsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::MPC_Outputs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::MPC_Outputs_<ContainerAllocator1> & lhs, const ::mavros_msgs::MPC_Outputs_<ContainerAllocator2> & rhs)
{
  return lhs.mpc_mv_out == rhs.mpc_mv_out;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::MPC_Outputs_<ContainerAllocator1> & lhs, const ::mavros_msgs::MPC_Outputs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74f4756230813d28d9765644d38e8155";
  }

  static const char* value(const ::mavros_msgs::MPC_Outputs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74f4756230813d28ULL;
  static const uint64_t static_value2 = 0xd9765644d38e8155ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/MPC_Outputs";
  }

  static const char* value(const ::mavros_msgs::MPC_Outputs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32[2] mpc_mv_out\n"
;
  }

  static const char* value(const ::mavros_msgs::MPC_Outputs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mpc_mv_out);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MPC_Outputs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::MPC_Outputs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::MPC_Outputs_<ContainerAllocator>& v)
  {
    s << indent << "mpc_mv_out[]" << std::endl;
    for (size_t i = 0; i < v.mpc_mv_out.size(); ++i)
    {
      s << indent << "  mpc_mv_out[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mpc_mv_out[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_MPC_OUTPUTS_H
